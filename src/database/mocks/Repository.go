// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/YAWAL/VmFsZXJpaS1ZYXZvcnNreWk/src/model"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteURLData provides a mock function with given fields: URLDataID
func (_m *Repository) DeleteURLData(URLDataID int64) error {
	ret := _m.Called(URLDataID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(URLDataID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllURLData provides a mock function with given fields:
func (_m *Repository) GetAllURLData() ([]model.URLData, error) {
	ret := _m.Called()

	var r0 []model.URLData
	if rf, ok := ret.Get(0).(func() []model.URLData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.URLData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDownloadHistoriesByURLDataID provides a mock function with given fields: ID
func (_m *Repository) GetDownloadHistoriesByURLDataID(ID string) ([]model.DownloadHistory, error) {
	ret := _m.Called(ID)

	var r0 []model.DownloadHistory
	if rf, ok := ret.Get(0).(func(string) []model.DownloadHistory); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.DownloadHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDownloadHistory provides a mock function with given fields: downloadHistory
func (_m *Repository) SaveDownloadHistory(downloadHistory model.DownloadHistory) error {
	ret := _m.Called(downloadHistory)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.DownloadHistory) error); ok {
		r0 = rf(downloadHistory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveURLData provides a mock function with given fields: data
func (_m *Repository) SaveURLData(data *model.URLData) (int64, error) {
	ret := _m.Called(data)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*model.URLData) int64); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.URLData) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
